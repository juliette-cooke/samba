gather(key = "key", value = "value", -rxns)%>%
separate(col=key, sep="_", into = c("type", "source")) %>%
pivot_wider(names_from = "type", values_from = value)
# Sampling
av_s = df_test2[df_test2$source=="s",c("rxns","av")]
va_s = df_test2[df_test2$source=="s",c("rxns","va")]
x_s2 = data.frame("rxns" = av_s$rxns,
"av" = av_s$av,
"va" = va_s$va)
dnorm_s2 = x_s2 %>% group_by(rxns) %>%
summarise("density" = dnorm(x, av, va))
dnorm_single_s_approx = dnorm_s2 %>%
filter(rxns == rxn) %>%
ungroup() %>%
select(density) %>%
cbind(x) %>%
as.data.frame() %>%
mutate("type" = "s_approx")
dnorm_single = rbind(dnorm_single_EP, dnorm_single_s, dnorm_single_s_approx) %>%
as.data.frame()
dnorm_single %>%
ggplot(aes(color = type, x=x, y= density))+
facet_wrap(~type, scales = "free_y",nrow = 3)+
geom_line() +
theme_light()+
ggtitle(rxn)+
xlim(c(-1000, 1000))
452
148
gc()
library(tidyverse)
library(samdata)
library(data.table)
av_metEP = data.frame(t(read.csv("/home/juliette/these/data/IEM/MetabolicEP/results/test/av_free_wt.csv",header = F)))
va_metEP = read.csv("/home/juliette/these/data/IEM/MetabolicEP/results/test/va_free_wt.csv", header = F)
va_metEP = va_metEP %>% mutate(V1 = sqrt(V1))
rxns = read.csv("/home/juliette/these/data/IEM/MetabolicEP/results/test/results_wt_rxns.csv", header = F)
sampling = fread("/home/juliette/these/data/IEM/MetabolicEP/results/test/sampling_Recon-2_prep_10000_Recon-2_preprocessed_S_10000_T_10.csv.gz",check.names = F)
sampling_df = sampling %>% as.data.frame()
sampling_r = sampling_df[,colnames(sampling_df) %in% rxns$V1]
df = data.frame("av_s" = apply(sampling_r, 2, mean), "va_s" = apply(sampling_r, 2, sd),
"av_EP" = av_metEP[,1], "va_EP" = va_metEP[,1])
df_EX = df %>%
rownames_to_column("rxns") %>%
filter(str_detect(rxns, "EX_")) %>%
column_to_rownames("rxns")
df_test2 = df_EX %>%
rownames_to_column("rxns") %>%
filter(rxns %in% rxn_all) %>%
gather(key = "key", value = "value", -rxns)%>%
separate(col=key, sep="_", into = c("type", "source")) %>%
pivot_wider(names_from = "type", values_from = value)
rxn_all = metab_names$Metab.EX.IDs
df_test2 = df_EX %>%
rownames_to_column("rxns") %>%
filter(rxns %in% rxn_all) %>%
gather(key = "key", value = "value", -rxns)%>%
separate(col=key, sep="_", into = c("type", "source")) %>%
pivot_wider(names_from = "type", values_from = value)
x = seq.int(from = -1000, to = 1000, length.out = 2000)
rxn = "EX_pro_L(e)"
av_s = df_test2[df_test2$source=="s",c("rxns","av")]
va_s = df_test2[df_test2$source=="s",c("rxns","va")]
x_s2 = data.frame("rxns" = av_s$rxns,
"av" = av_s$av,
"va" = va_s$va)
dnorm_s2 = x_s2 %>% group_by(rxns) %>%
summarise("density" = dnorm(x, av, va))
rnorm_single_EP %>% rbind(single_s) %>%
ggplot(aes(x=midpoints, y=prob, color = type))+
geom_bar(stat="identity")+
facet_wrap(~type)
x_s2 = data.frame("rxns" = av_s$rxns,
"av" = av_s$av,
"va" = va_s$va)
x_EP2 = data.frame("rxns" = av_EP$rxns,
"av" = av_EP$av,
"va" = va_EP$va)
av_EP = df_test2[df_test2$source=="EP",c("rxns","av")]
va_EP = df_test2[df_test2$source=="EP",c("rxns","va")]
x_EP2 = data.frame("rxns" = av_EP$rxns,
"av" = av_EP$av,
"va" = va_EP$va)
dnorm_EP2 = x_EP2 %>% group_by(rxns) %>%
summarise("density" = dnorm(x, av, va))
dnorm_s2 = x_s2 %>% group_by(rxns) %>%
summarise("density" = dnorm(x, av, va))
dnorm_single_EP = dnorm_EP2 %>%
filter(rxns == rxn) %>%
ungroup() %>%
select(density) %>%
cbind(x) %>%
as.data.frame() %>%
mutate("type" = "EP")
dnorm_single_s_approx = dnorm_s2 %>%
filter(rxns == rxn) %>%
ungroup() %>%
select(density) %>%
cbind(x) %>%
as.data.frame() %>%
mutate("type" = "s_approx")
dnorm_single_s = sampling_r %>%
pull(rxn) %>%
density(., n = 2000, from = -1000, to = 1000) %>%
keep(names(.) %in% c("x", "y")) %>%
as.data.frame() %>%
rename("density" = y)%>%
mutate("type" = "s")
dnorm_single = rbind(dnorm_single_EP, dnorm_single_s, dnorm_single_s_approx) %>%
as.data.frame()
dnorm_single %>%
ggplot(aes(color = type, x=x, y= density))+
facet_wrap(~type, scales = "free_y",nrow = 3)+
geom_line() +
theme_light()+
ggtitle(rxn)+
xlim(c(-1000, 1000))
# KBD
density_single_s = sampling_r %>%
pull(rxn) %>%
density(., n = 2000, from = -1000, to = 1000) %>%
approxfun(., rule = 2)
df_single = df_EX %>%
rownames_to_column("rxns") %>%
filter(rxns == rxn)
LR <- function(x){ log(density_single_s(x) + 1e-6) - log(dnorm(x, df_single$av_EP, df_single$va_EP))}
KKL <- function(x) { density_single_s(x) * LR(x) }
KL1 <- integrate(KKL, lower=-1000, upper=1000, subdivisions = 2000, rel.tol = 0.001)
print(KL1)
LR <- function(x){ log(density_single_s(x) + 1e-6) - log(dnorm(x, df_single$av_s, df_single$va_s))}
KKL <- function(x) { density_single_s(x) * LR(x) }
KL1 <- integrate(KKL, lower=-1000, upper=1000, subdivisions = 2000, rel.tol = 0.001)
print(KL1)
LR <- function(x){  log(dnorm(x, df_single$av_s, df_single$va_s)) - log(dnorm(x, df_single$av_EP, df_single$va_EP))}
KKL <- function(x) { dnorm(x, df_single$av_s, df_single$va_s) * LR(x) }
KL1 <- integrate(KKL, lower=-1000, upper=1000, subdivisions = 2000, rel.tol = 0.001)
print(KL1)
LR <- function(x){  log(density_single_s(x) + 1e-6) - log(dunif(x, min = -1000, max = 1000))}
KKL <- function(x) { density_single_s(x) * LR(x) }
KL1 <- integrate(KKL, lower=-1000, upper=1000, subdivisions = 2000, rel.tol = 0.001)
print(KL1)
library(sambar)
library(cowplot)
library(tidyverse)
# To import one disease (two files)
sdata = load_sampling_results("/home/juliette/these/code/git/samba/data/", "xaa")
diff = calc_diff(sdata)
#zscore = read.csv("/home/juliette/these/data/IEM/sampling/analysis/wtopt_0_1/results/wtopt_0_1_pred.csv")
zscore = calc_zscore(diff)
gc()
means = calc_sdata_means(sdata)
plot_scatter(sdata, zscore, means, thr=1)
gc()
library(sambar)
library(cowplot)
library(tidyverse)
# Read in metab dict for the specific model
metab_dict = read.csv("/home/juliette/these/code/git/samba/test_data/Recon-2_from_matlab_metab_id_name.tsv", sep = "\t")
# Create a loop producing scatter plots
# Automatically parse the prefixes
indir="/home/juliette/these/code/git/samba/data/"
files = list.files(indir)
prefixes = unlist(unique(lapply(files, function(x) unlist(str_split(file_path_sans_ext(x, compression = T), "_"))[1])))
for (i in 1:length(prefixes)){
sdata = load_sampling_results("/home/juliette/these/code/git/samba/data/", prefixes[i])
diff = calc_diff(sdata)
zscore = calc_zscore(diff)
gc()
means = calc_sdata_means(sdata)
plot_scatter(sdata, zscore, metab_dict = metab_dict, means, thr=1)
ggsave(paste0("/home/juliette/these/code/git/samba/",prefixes[i], "_scatterplot.png"),width = 15, height = 10)
}
library(tools)
prefixes = unlist(unique(lapply(files, function(x) unlist(str_split(file_path_sans_ext(x, compression = T), "_"))[1])))
for (i in 1:length(prefixes)){
sdata = load_sampling_results("/home/juliette/these/code/git/samba/data/", prefixes[i])
diff = calc_diff(sdata)
zscore = calc_zscore(diff)
gc()
means = calc_sdata_means(sdata)
plot_scatter(sdata, zscore, metab_dict = metab_dict, means, thr=1)
ggsave(paste0("/home/juliette/these/code/git/samba/",prefixes[i], "_scatterplot.png"),width = 15, height = 10)
}
for (i in 1:length(prefixes)){
sdata = load_sampling_results("/home/juliette/these/code/git/samba/data/", prefixes[i])
diff = calc_diff(sdata)
zscore = calc_zscore(diff)
gc()
means = calc_sdata_means(sdata)
plot_scatter(sdata, zscore, metab_dict = metab_dict, means, thr=1)
ggsave(paste0("/home/juliette/these/code/git/samba/test_plots/",prefixes[i], "_scatterplot.png"),width = 15, height = 10)
}
for (i in 1:length(prefixes)){
sdata = load_sampling_results("/home/juliette/these/code/git/samba/data/", prefixes[i])
diff = calc_diff(sdata)
zscore = calc_zscore(diff)
gc()
means = calc_sdata_means(sdata)
plot_scatter(sdata, zscore, metab_dict = metab_dict, means, thr=1)
ggsave(paste0("/home/juliette/these/code/git/samba/test_plots/",prefixes[i], "_scatterplot.png"),width = 15, height = 10)
}
c(inferno(n=7, direction = 1), inferno(n=7, direction = -1))
library(viridis)
c(inferno(n=7, direction = 1), inferno(n=7, direction = -1))
?inferno
?palette
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+
facet_zoom(xlim = c(-1,1), ylim = c(-1,1))+
# Either force the scale to be the same regardless of the values
# Or find a way to move the middle of the gradient to 0
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = c(-1,1))+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
# Join the zscore with the means
z_m = zscore %>% left_join(., means$WT , by="Metab") %>% left_join(., means$MUT , by="Metab")
#thr = 1
# Filter the zscore based on the provided threshold
z_m_filtered = z_m %>% filter(zscore > thr | zscore < -thr)
thr = 1
case="Disease"
#thr = 1
# Filter the zscore based on the provided threshold
z_m_filtered = z_m %>% filter(zscore > thr | zscore < -thr)
# Create the breaks for the legend
z_breaks = round(seq(from=min(z_m_filtered$zscore), to=max(z_m_filtered$zscore),by=5))
z_breaks = z_breaks[abs(z_breaks-thr) > 4]
z_breaks_thr = c(z_breaks, thr, -thr)
z_labels = c(z_breaks, paste0(" thr=",thr), paste0("-thr=", -thr))
metab_map = as.vector(metab_dict$Name)
names(metab_map) = metab_dict$ID
z_m_filtered$Metab = str_replace_all(string=z_m_filtered$Metab, pattern= fixed(metab_map))
z_m_filtered = z_m_filtered %>%
mutate(label_col = case_when(zscore>0 ~ "black",
zscore<0 ~ "white"))
# Find a way to check for outliers
quantile(z_m_filtered$mean_WT, probs= seq(0,1, 0.1))
quantile(z_m_filtered$mean_MUT, probs= seq(0,1, 0.1))
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+
facet_zoom(xlim = c(-1,1), ylim = c(-1,1))+
# Either force the scale to be the same regardless of the values
# Or find a way to move the middle of the gradient to 0
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = c(-1,1))+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
library(ggforce)
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+
facet_zoom(xlim = c(-1,1), ylim = c(-1,1))+
# Either force the scale to be the same regardless of the values
# Or find a way to move the middle of the gradient to 0
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = c(-1,1))+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
library(ggrepel)
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+
facet_zoom(xlim = c(-1,1), ylim = c(-1,1))+
# Either force the scale to be the same regardless of the values
# Or find a way to move the middle of the gradient to 0
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = c(-1,1))+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
View(z_m_filtered)
# Create the scale limits for the legend
max(abs(z_m_filtered$zscore))
z_limits = c(-max(abs(z_m_filtered$zscore)),max(abs(z_m_filtered$zscore)))
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+
facet_zoom(xlim = c(-1,1), ylim = c(-1,1))+
# Either force the scale to be the same regardless of the values
# Or find a way to move the middle of the gradient to 0
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = z_limits)+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
# Create the breaks for the legend
z_max = max(abs(z_m_filtered$zscore))
z_breaks = round(seq(from=-z_max, to=z_max,by=z_max/4))
z_breaks = round(seq(from=-z_max, to=z_max,by=z_max/3))
z_breaks = round(seq(from=-z_max, to=z_max,by=z_max/2))
z_breaks = z_breaks[abs(z_breaks-thr) > 4]
z_breaks = round(seq(from=-z_max, to=z_max,by=z_max/2))
z_breaks = z_breaks[abs(z_breaks-thr) > 2]
z_breaks = round(seq(from=-z_max, to=z_max,by=z_max/2))
z_breaks = z_breaks[abs(z_breaks-thr) > 1.9]
z_breaks = round(seq(from=-z_max, to=z_max,by=z_max/2))
z_breaks = z_breaks[abs(z_breaks-thr) > 0.9]
z_breaks_thr = c(z_breaks, thr, -thr)
z_labels = c(z_breaks, paste0(" thr=",thr), paste0("-thr=", -thr))
# Create the scale limits for the legend so that the scale gradient is symmetrical
z_limits = c(-z_max,z_max)
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+
facet_zoom(xlim = c(-1,1), ylim = c(-1,1))+
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = z_limits)+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
# Create the scale limits for the legend so that the scale gradient is symmetrical
z_limits = c(min(z_breaks),max(z_breaks))
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+
facet_zoom(xlim = c(-1,1), ylim = c(-1,1))+
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = z_limits)+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
# Find a way to check for outliers
quantile(z_m_filtered$mean_WT, probs= seq(0,1, 0.1))
# Find a way to check for outliers
quantile(c(z_m_filtered$mean_WT, z_m_filtered$mean_MUT), probs= seq(0,1, 0.1))
IQR(c(z_m_filtered$mean_WT, z_m_filtered$mean_MUT))
quantile(all_zscroes, 0.90) - quantile(all_zscroes, 0.10)
# Find a way to check for outliers
all_zscroes = c(z_m_filtered$mean_WT, z_m_filtered$mean_MUT)
quantile(all_zscroes, 0.90) - quantile(all_zscroes, 0.10)
quantile(all_zscroes, 0.95) - quantile(all_zscroes, 0.05)
quantile(all_zscroes, 0.95)
quantile(all_zscroes, probs= seq(0,1, 0.1))
iqr_z = IQR(all_zscores)
# Find a way to check for outliers
all_zscores = c(z_m_filtered$mean_WT, z_m_filtered$mean_MUT)
quantile(all_zscores)
q_z = quantile(all_zscores)
extreme.threshold.upper = (iqr_z * 3) + q_z[4]
iqr_z = IQR(all_zscores)
extreme.threshold.upper = (iqr_z * 3) + q_z[4]
extreme.threshold.lower = q_z[2] - (iqr_z * 3)
z_thr_upper = (iqr_z * 3) + q_z[4]
z_thr_lower = q_z[2] - (iqr_z * 3)
lapply(all_zscores, function(x) abs(x-z_thr_upper))
sort(lapply(all_zscores, function(x) abs(x-z_thr_upper)))
sort(unlist(lapply(all_zscores, function(x) abs(x-z_thr_upper))))
sum(unlist(lapply(all_zscores, function(x) abs(x-z_thr_upper))) > 5)
# If there are any values further than 5 from the upper quantile check, add a zoom
if (sum(unlist(lapply(all_zscores, function(x) abs(x-z_thr_upper))) > 5) > 0){
zoom = T
}else{
zoom = F
}
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+ {
if (zoom == T){
facet_zoom(xlim = c(-1,1), ylim = c(-1,1))
}
}+
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = z_limits)+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
facet_zoom(xlim = c(-z_thr_upper,z_thr_upper), ylim = c(-z_thr_upper,z_thr_upper))
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+ {
if (zoom == T){
facet_zoom(xlim = c(-z_thr_upper,z_thr_upper), ylim = c(-z_thr_upper,z_thr_upper))
}
}+
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = z_limits)+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+ {
if (zoom == T){
facet_zoom(xlim = c(z_thr_lower,z_thr_upper), ylim = c(z_thr_lower,z_thr_upper))
}
}+
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = z_limits)+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
z_thr_upper_med = (iqr_z * 1.5) + q_z[4]
z_thr_lower_med = q_z[2] - (iqr_z * 1.5)
z_m_filtered %>%
ggplot(aes(x=mean_WT, y=mean_MUT, fill=zscore))+
annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = "white", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = "lightgrey", alpha=0.5)+
annotate("rect", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = "white", alpha=0.5)+
geom_point( size = 4, pch=21, colour = "black")+
geom_abline(intercept = 0, linetype = "dashed")+ {
if (zoom == T){
facet_zoom(xlim = c(z_thr_lower_med,z_thr_upper_med), ylim = c(z_thr_lower_med,z_thr_upper_med))
}
}+
scale_fill_gradientn(colours = c(inferno(n=7, direction = 1), inferno(n=7, direction = -1)),
breaks = z_breaks_thr, labels= z_labels,
limits = z_limits)+
theme_light()+
ggtitle(paste0("WT mean fluxes vs KO mean fluxes for ", case))+
xlab("WT mean flux")+
ylab("KO mean flux")+
geom_text_repel(aes(label=Metab), colour = "black", box.padding = 0.5,min.segment.length = 0.6)
# To test changes without reloading R:
devtools::load_all()
setwd("~/these/code/git/samba/sambar")
# To test changes without reloading R:
devtools::load_all()
# To import one disease (two files)
sdata = load_sampling_results("/home/juliette/these/code/git/samba/data/", "xac")
diff = calc_diff(sdata)
zscore = calc_zscore(diff)
gc()
means = calc_sdata_means(sdata)
plot_scatter(sdata, zscore, metab_dict = metab_dict, means, thr=1)
plot_scatter(sdata, zscore, metab_dict = metab_dict, means, thr=1,outlier.dist = 3)
